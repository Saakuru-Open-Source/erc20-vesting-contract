{
  "address": "0x555A75CB5A4bF5C6508643dC2Ec26EA749fE642b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recoveryWallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_cancelledBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_remainingBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_canceledTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ScheduleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "ScheduleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "cancelVestingForBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationInDays",
          "type": "uint256"
        }
      ],
      "name": "createVestingSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "getAvailableWithdrawAmountForAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoveryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "vestingScheduleForBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canceledTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastDrawnAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_remainingBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfb1aa4646a55bac267eb39ef0160fc8da0e1452f7534048f1c14ed43e6f501a",
  "receipt": {
    "to": null,
    "from": "0x87F9F7e6C9502D2Ce13dae9BA716e54cA98f118F",
    "contractAddress": "0x555A75CB5A4bF5C6508643dC2Ec26EA749fE642b",
    "transactionIndex": 0,
    "gasUsed": "1150700",
    "logsBloom": "0x
    "blockHash": "0x34c87d9fc68caf4c95c2b57f4a87bf9a5038a3e530358eaca1611a424ecca6fb",
    "transactionHash": "0xdfb1aa4646a55bac267eb39ef0160fc8da0e1452f7534048f1c14ed43e6f501a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29576896,
        "transactionHash": "0xdfb1aa4646a55bac267eb39ef0160fc8da0e1452f7534048f1c14ed43e6f501a",
        "address": "0x555A75CB5A4bF5C6508643dC2Ec26EA749fE642b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000087f9f7e6c9502d2ce13dae9ba716e54ca98f118f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x34c87d9fc68caf4c95c2b57f4a87bf9a5038a3e530358eaca1611a424ecca6fb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29576896,
        "transactionHash": "0xdfb1aa4646a55bac267eb39ef0160fc8da0e1452f7534048f1c14ed43e6f501a",
        "address": "0x555A75CB5A4bF5C6508643dC2Ec26EA749fE642b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000087f9f7e6c9502d2ce13dae9ba716e54ca98f118f",
          "0x00000000000000000000000087f9f7e6c9502d2ce13dae9ba716e54ca98f118f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x34c87d9fc68caf4c95c2b57f4a87bf9a5038a3e530358eaca1611a424ecca6fb"
      }
    ],
    "blockNumber": 29576896,
    "cumulativeGasUsed": "1150700",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe2dCA969624795985F2f083BcD0b674337ba130a",
    "0x87F9F7e6C9502D2Ce13dae9BA716e54cA98f118F",
    "0x53745Cc2c6Dc4B1468F41D286Cd1AAb7aa7a1B81"
  ],
  "numDeployments": 1,
  "solcInputHash": "c76480992b59e00aa54f4f15a622cc13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recoveryWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_cancelledBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_remainingBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_canceledTimestamp\",\"type\":\"uint256\"}],\"name\":\"ScheduleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"ScheduleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"cancelVestingForBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getAvailableWithdrawAmountForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"vestingScheduleForBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canceledTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastDrawnAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VestingContract.sol\":\"VestingContract\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/VestingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract VestingContract is ReentrancyGuard, Context, Ownable {\\n  event ScheduleCreated(address indexed _beneficiary, uint256 indexed _amount, uint256 indexed _startTimestamp, uint256 _duration);\\n\\n  event ScheduleCancelled(address indexed _beneficiary, address indexed _cancelledBy, uint256 _remainingBalance, uint256 _canceledTimestamp);\\n\\n  event Withdraw(address indexed _beneficiary, uint256 indexed _amount, uint256 indexed _time);\\n\\n  struct Schedule {\\n    uint256 startTimestamp;\\n    uint256 endTimestamp;\\n    uint256 canceledTimestamp;\\n    uint256 amount;\\n    uint256 totalDrawn;\\n    uint256 lastDrawnAt;\\n    uint256 withdrawRate;\\n  }\\n\\n  // Vested address to its schedule\\n  mapping(address => Schedule) private vestingSchedule;\\n\\n  // AAG token contract\\n  IERC20 public token;\\n  uint256 private constant ONE_DAY_IN_SECONDS = 1 days;\\n\\n  address public recoveryWallet;\\n\\n  bool public paused;\\n\\n  constructor(IERC20 _token, address _owner, address _recoveryWallet) {\\n    token = _token;\\n    require(_owner != address(0), \\\"Owner cannot be empty\\\");\\n    transferOwnership(_owner);\\n    require(_recoveryWallet != address(0), \\\"Recovery wallet cannot be empty\\\");\\n    recoveryWallet = _recoveryWallet;\\n    paused = true;\\n  }\\n\\n  function setStatus(bool _paused) external onlyOwner {\\n    paused = _paused;\\n  }\\n\\n  // Create vesting schedule\\n  function createVestingSchedule(\\n    address _beneficiary,\\n    uint256 _amount,\\n    uint256 _startTimestamp,\\n    uint256 _durationInDays\\n  ) external onlyOwner {\\n    require(_beneficiary != address(0), \\\"Beneficiary cannot be empty\\\");\\n    require(_amount > 0, \\\"Amount cannot be empty\\\");\\n    require(_durationInDays > 0, \\\"Duration cannot be empty\\\");\\n    require(_startTimestamp > block.timestamp, \\\"Can not set the date in the past\\\");\\n    // Ensure one per address\\n    require(vestingSchedule[_beneficiary].amount == 0, \\\"Schedule already exists\\\");\\n\\n    // Create schedule\\n    uint256 _durationInSecs = _durationInDays * ONE_DAY_IN_SECONDS;\\n    vestingSchedule[_beneficiary] = Schedule({\\n      startTimestamp: _startTimestamp,\\n      endTimestamp: _startTimestamp + _durationInSecs,\\n      canceledTimestamp: 0,\\n      amount: _amount,\\n      totalDrawn: 0,\\n      lastDrawnAt: 0,\\n      withdrawRate: _amount / _durationInSecs\\n    });\\n\\n    emit ScheduleCreated(_beneficiary, _amount, vestingSchedule[_beneficiary].startTimestamp, _durationInDays);\\n\\n    // Transfer tokens in the vesting contract on behalf of the beneficiary\\n    require(token.transferFrom(_msgSender(), address(this), _amount), \\\"Unable to transfer tokens to vesting contract\\\");\\n  }\\n\\n  // Cancel vesting schedule for beneficiary\\n  function cancelVestingForBeneficiary(address _beneficiary) external onlyOwner {\\n    Schedule storage item = vestingSchedule[_beneficiary];\\n    require(item.canceledTimestamp == 0, \\\"Can not cancel twice\\\");\\n    require(item.endTimestamp > block.timestamp, \\\"Vesting is already finished\\\");\\n\\n    uint256 availableAmount = getAvailableWithdrawAmountForSchedule(item);\\n\\n    item.canceledTimestamp = block.timestamp;\\n\\n    uint256 finalAmountForBeneficiary = availableAmount + item.totalDrawn;\\n    uint256 amountToRetrieveToOwner = item.amount - finalAmountForBeneficiary;\\n\\n    // Set final amount for beneficiary\\n    item.amount = finalAmountForBeneficiary;\\n\\n    // Return unvested tokens to owner\\n    require(token.transfer(recoveryWallet, amountToRetrieveToOwner), \\\"Unable to transfer tokens\\\");\\n\\n    emit ScheduleCancelled(_beneficiary, _msgSender(), availableAmount, vestingSchedule[_beneficiary].canceledTimestamp);\\n  }\\n\\n  // Emergency withdrawal (Whole balance)\\n  function emergencyWithdrawAllTokens() external onlyOwner {\\n    uint256 balance = token.balanceOf(address(this));\\n    // Return all tokens to the owner\\n    require(token.transfer(recoveryWallet, balance), \\\"Unable to transfer tokens\\\");\\n  }\\n\\n  function withdraw() external nonReentrant {\\n    require(paused == false, \\\"Claiming not available yet\\\");\\n    Schedule memory schedule = vestingSchedule[_msgSender()];\\n    require(schedule.amount > 0, \\\"There is no schedule currently in flight\\\");\\n\\n    // available right now\\n    uint256 amount = getAvailableWithdrawAmountForSchedule(schedule);\\n    require(amount > 0, \\\"Nothing to withdraw\\\");\\n\\n    // Update last drawn to now\\n    vestingSchedule[_msgSender()].lastDrawnAt = block.timestamp;\\n\\n    // Increase total drawn amount\\n    vestingSchedule[_msgSender()].totalDrawn = schedule.totalDrawn + amount;\\n\\n    // Issue tokens to beneficiary\\n    require(token.transfer(_msgSender(), amount), \\\"Unable to transfer tokens\\\");\\n\\n    emit Withdraw(_msgSender(), amount, block.timestamp);\\n  }\\n\\n  // Accessors\\n  function tokenBalance() external view returns (uint256) {\\n    return token.balanceOf(address(this));\\n  }\\n\\n  function vestingScheduleForBeneficiary(address _beneficiary)\\n    external\\n    view\\n    returns (\\n      uint256 _startTimestamp,\\n      uint256 _endTimestamp,\\n      uint256 _canceledTimestamp,\\n      uint256 _amount,\\n      uint256 _totalDrawn,\\n      uint256 _lastDrawnAt,\\n      uint256 _withdrawRate,\\n      uint256 _remainingBalance\\n    )\\n  {\\n    Schedule memory schedule = vestingSchedule[_beneficiary];\\n    return (\\n      schedule.startTimestamp,\\n      schedule.endTimestamp,\\n      schedule.canceledTimestamp,\\n      schedule.amount,\\n      schedule.totalDrawn,\\n      schedule.lastDrawnAt,\\n      schedule.withdrawRate,\\n      schedule.amount - schedule.totalDrawn\\n    );\\n  }\\n\\n  function getAvailableWithdrawAmountForAddress(address _beneficiary) external view returns (uint256 _amount) {\\n    Schedule memory schedule = vestingSchedule[_beneficiary];\\n    return getAvailableWithdrawAmountForSchedule(schedule);\\n  }\\n\\n  function getAvailableWithdrawAmountForSchedule(Schedule memory _schedule) internal view returns (uint256 _amount) {\\n    // Vesting haven't started\\n    if (block.timestamp <= _schedule.startTimestamp) {\\n      return 0;\\n    }\\n\\n    // Ended\\n    if (block.timestamp > _schedule.endTimestamp && _schedule.canceledTimestamp == 0) {\\n      return _schedule.amount - _schedule.totalDrawn;\\n    }\\n\\n    // Canceled\\n    if (block.timestamp > _schedule.canceledTimestamp && _schedule.canceledTimestamp != 0) {\\n      uint256 timeVestedSinceCanceled = _schedule.canceledTimestamp - _schedule.startTimestamp;\\n      return timeVestedSinceCanceled * _schedule.withdrawRate - _schedule.totalDrawn;\\n    }\\n\\n    // Active\\n    uint256 timePassedFromVestingStart = block.timestamp - _schedule.startTimestamp;\\n    return timePassedFromVestingStart * _schedule.withdrawRate - _schedule.totalDrawn;\\n  }\\n}\\n\",\"keccak256\":\"0x9d4290e7c05bcfa2d9e01431c09805aa46b67c0199d22db9f42fafa374141c5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620014ef380380620014ef833981016040819052620000349162000281565b6001600055620000443362000152565b600380546001600160a01b0319166001600160a01b03858116919091179091558216620000b85760405162461bcd60e51b815260206004820152601560248201527f4f776e65722063616e6e6f7420626520656d707479000000000000000000000060448201526064015b60405180910390fd5b620000c382620001a4565b6001600160a01b0381166200011b5760405162461bcd60e51b815260206004820152601f60248201527f5265636f766572792077616c6c65742063616e6e6f7420626520656d707479006044820152606401620000af565b6004805460ff60a01b196001600160a01b039093166001600160a01b03199091161791909116600160a01b17905550620002ea9050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001ae62000223565b6001600160a01b038116620002155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000af565b620002208162000152565b50565b6001546001600160a01b031633146200027f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000af565b565b60008060006060848603121562000296578283fd5b8351620002a381620002d4565b6020850151909350620002b681620002d4565b6040850151909250620002c981620002d4565b809150509250925092565b6001600160a01b03811681146200022057600080fd5b6111f580620002fa6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063c570b83511610066578063c570b835146101bd578063efacabf01461020b578063f2fde38b1461021e578063fc0c546a14610231576100ea565b8063715018a61461019c5780638da5cb5b146101a45780639e1a4d19146101b5576100ea565b80633f4e8e80116100c85780633f4e8e801461014a5780635624dfc61461015d5780635c40f6f4146101655780635c975abb14610178576100ea565b8063324d2f68146100ef5780633ccfd60b146101155780633ec954ed1461011f575b600080fd5b6101026100fd36600461104d565b610244565b6040519081526020015b60405180910390f35b61011d6102ba565b005b600454610132906001600160a01b031681565b6040516001600160a01b03909116815260200161010c565b61011d61015836600461106e565b610562565b61011d610908565b61011d6101733660046110a6565b610a39565b60045461018c90600160a01b900460ff1681565b604051901515815260200161010c565b61011d610a5f565b6001546001600160a01b0316610132565b610102610a71565b6101d06101cb36600461104d565b610af2565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161010c565b61011d61021936600461104d565b610b99565b61011d61022c36600461104d565b610deb565b600354610132906001600160a01b031681565b6001600160a01b0381166000908152600260208181526040808420815160e0810183528154815260018201549381019390935292830154908201526003820154606082015260048201546080820152600582015460a082015260069091015460c08201526102b181610e61565b9150505b919050565b6102c2610f30565b600454600160a01b900460ff16156103215760405162461bcd60e51b815260206004820152601a60248201527f436c61696d696e67206e6f7420617661696c61626c652079657400000000000060448201526064015b60405180910390fd5b33600090815260026020818152604092839020835160e08101855281548152600182015492810192909252918201549281019290925260038101546060830181905260048201546080840152600582015460a084015260069091015460c08301526103df5760405162461bcd60e51b815260206004820152602860248201527f5468657265206973206e6f207363686564756c652063757272656e746c7920696044820152671b88199b1a59da1d60c21b6064820152608401610318565b60006103ea82610e61565b9050600081116104325760405162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b6044820152606401610318565b33600090815260026020526040902042600590910155608082015161045890829061112d565b60026000336001600160a01b0390811682526020820192909252604001600020600401919091556003541663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050991906110c2565b6105255760405162461bcd60e51b8152600401610318906110f6565b6040514290829033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890600090a450506105606001600055565b565b61056a610f8a565b6001600160a01b0384166105c05760405162461bcd60e51b815260206004820152601b60248201527f42656e65666963696172792063616e6e6f7420626520656d70747900000000006044820152606401610318565b600083116106095760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742063616e6e6f7420626520656d70747960501b6044820152606401610318565b600081116106595760405162461bcd60e51b815260206004820152601860248201527f4475726174696f6e2063616e6e6f7420626520656d70747900000000000000006044820152606401610318565b4282116106a85760405162461bcd60e51b815260206004820181905260248201527f43616e206e6f742073657420746865206461746520696e2074686520706173746044820152606401610318565b6001600160a01b038416600090815260026020526040902060030154156107115760405162461bcd60e51b815260206004820152601760248201527f5363686564756c6520616c7265616479206578697374730000000000000000006044820152606401610318565b60006107206201518083611165565b90506040518060e00160405280848152602001828561073f919061112d565b8152602001600081526020018581526020016000815260200160008152602001828661076b9190611145565b90526001600160a01b03861660008181526002602081815260409283902085518082559186015160018201558584015192810192909255606085015160038301556080850151600483015560a0850151600583015560c090940151600690910155518691907f5ab0cb75fe24f04dbfe14b847f8579bc91baa153ee5b2758fcfa59f33675b162906107ff9087815260200190565b60405180910390a46003546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101879052606401602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f91906110c2565b6109015760405162461bcd60e51b815260206004820152602d60248201527f556e61626c6520746f207472616e7366657220746f6b656e7320746f2076657360448201526c1d1a5b99c818dbdb9d1c9858dd609a1b6064820152608401610318565b5050505050565b610910610f8a565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561095457600080fd5b505afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c91906110de565b6003546004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820184905292935091169063a9059cbb90604401602060405180830381600087803b1580156109e257600080fd5b505af11580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a91906110c2565b610a365760405162461bcd60e51b8152600401610318906110f6565b50565b610a41610f8a565b60048054911515600160a01b0260ff60a01b19909216919091179055565b610a67610f8a565b6105606000610fe4565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906110de565b905090565b6001600160a01b0381166000908152600260208181526040808420815160e0810183528154808252600183015494820185905294820154928101839052600382015460608201819052600483015460808301819052600584015460a0840181905260069094015460c0840181905288978897889788978897889788979196909290610b7d8385611184565b9850985098509850985098509850985050919395975091939597565b610ba1610f8a565b6001600160a01b03811660009081526002602081905260409091209081015415610c045760405162461bcd60e51b815260206004820152601460248201527343616e206e6f742063616e63656c20747769636560601b6044820152606401610318565b42816001015411610c575760405162461bcd60e51b815260206004820152601b60248201527f56657374696e6720697320616c72656164792066696e697368656400000000006044820152606401610318565b6040805160e08101825282548152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600090610caf90610e61565b4260028401556004830154909150600090610cca908361112d565b90506000818460030154610cde9190611184565b6003858101849055546004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820184905292935091169063a9059cbb90604401602060405180830381600087803b158015610d3a57600080fd5b505af1158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7291906110c2565b610d8e5760405162461bcd60e51b8152600401610318906110f6565b6001600160a01b0385166000818152600260208181526040928390209091015482518781529182015281513393927fbc2075d9ef107583b6d08c65185a920ae48465167bcc8d1a42829d206a894d1a928290030190a35050505050565b610df3610f8a565b6001600160a01b038116610e585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610318565b610a3681610fe4565b80516000904211610e74575060006102b5565b816020015142118015610e8957506040820151155b15610ea95781608001518260600151610ea29190611184565b90506102b5565b816040015142118015610ebf5750604082015115155b15610f005781516040830151600091610ed791611184565b905082608001518360c0015182610eee9190611165565b610ef89190611184565b9150506102b5565b8151600090610f0f9042611184565b905082608001518360c0015182610f269190611165565b6102b19190611184565b60026000541415610f835760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610318565b6002600055565b6001546001600160a01b031633146105605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610318565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146102b557600080fd5b60006020828403121561105e578081fd5b61106782611036565b9392505050565b60008060008060808587031215611083578283fd5b61108c85611036565b966020860135965060408601359560600135945092505050565b6000602082840312156110b7578081fd5b8135611067816111b1565b6000602082840312156110d3578081fd5b8151611067816111b1565b6000602082840312156110ef578081fd5b5051919050565b60208082526019908201527f556e61626c6520746f207472616e7366657220746f6b656e7300000000000000604082015260600190565b600082198211156111405761114061119b565b500190565b60008261116057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561117f5761117f61119b565b500290565b6000828210156111965761119661119b565b500390565b634e487b7160e01b600052601160045260246000fd5b8015158114610a3657600080fdfea264697066735822122097f82399487f1dc446258d5a219eddc1712f404ffdf980f5bef078610fb0e67a64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063c570b83511610066578063c570b835146101bd578063efacabf01461020b578063f2fde38b1461021e578063fc0c546a14610231576100ea565b8063715018a61461019c5780638da5cb5b146101a45780639e1a4d19146101b5576100ea565b80633f4e8e80116100c85780633f4e8e801461014a5780635624dfc61461015d5780635c40f6f4146101655780635c975abb14610178576100ea565b8063324d2f68146100ef5780633ccfd60b146101155780633ec954ed1461011f575b600080fd5b6101026100fd36600461104d565b610244565b6040519081526020015b60405180910390f35b61011d6102ba565b005b600454610132906001600160a01b031681565b6040516001600160a01b03909116815260200161010c565b61011d61015836600461106e565b610562565b61011d610908565b61011d6101733660046110a6565b610a39565b60045461018c90600160a01b900460ff1681565b604051901515815260200161010c565b61011d610a5f565b6001546001600160a01b0316610132565b610102610a71565b6101d06101cb36600461104d565b610af2565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161010c565b61011d61021936600461104d565b610b99565b61011d61022c36600461104d565b610deb565b600354610132906001600160a01b031681565b6001600160a01b0381166000908152600260208181526040808420815160e0810183528154815260018201549381019390935292830154908201526003820154606082015260048201546080820152600582015460a082015260069091015460c08201526102b181610e61565b9150505b919050565b6102c2610f30565b600454600160a01b900460ff16156103215760405162461bcd60e51b815260206004820152601a60248201527f436c61696d696e67206e6f7420617661696c61626c652079657400000000000060448201526064015b60405180910390fd5b33600090815260026020818152604092839020835160e08101855281548152600182015492810192909252918201549281019290925260038101546060830181905260048201546080840152600582015460a084015260069091015460c08301526103df5760405162461bcd60e51b815260206004820152602860248201527f5468657265206973206e6f207363686564756c652063757272656e746c7920696044820152671b88199b1a59da1d60c21b6064820152608401610318565b60006103ea82610e61565b9050600081116104325760405162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b6044820152606401610318565b33600090815260026020526040902042600590910155608082015161045890829061112d565b60026000336001600160a01b0390811682526020820192909252604001600020600401919091556003541663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b1580156104d157600080fd5b505af11580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050991906110c2565b6105255760405162461bcd60e51b8152600401610318906110f6565b6040514290829033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56890600090a450506105606001600055565b565b61056a610f8a565b6001600160a01b0384166105c05760405162461bcd60e51b815260206004820152601b60248201527f42656e65666963696172792063616e6e6f7420626520656d70747900000000006044820152606401610318565b600083116106095760405162461bcd60e51b8152602060048201526016602482015275416d6f756e742063616e6e6f7420626520656d70747960501b6044820152606401610318565b600081116106595760405162461bcd60e51b815260206004820152601860248201527f4475726174696f6e2063616e6e6f7420626520656d70747900000000000000006044820152606401610318565b4282116106a85760405162461bcd60e51b815260206004820181905260248201527f43616e206e6f742073657420746865206461746520696e2074686520706173746044820152606401610318565b6001600160a01b038416600090815260026020526040902060030154156107115760405162461bcd60e51b815260206004820152601760248201527f5363686564756c6520616c7265616479206578697374730000000000000000006044820152606401610318565b60006107206201518083611165565b90506040518060e00160405280848152602001828561073f919061112d565b8152602001600081526020018581526020016000815260200160008152602001828661076b9190611145565b90526001600160a01b03861660008181526002602081815260409283902085518082559186015160018201558584015192810192909255606085015160038301556080850151600483015560a0850151600583015560c090940151600690910155518691907f5ab0cb75fe24f04dbfe14b847f8579bc91baa153ee5b2758fcfa59f33675b162906107ff9087815260200190565b60405180910390a46003546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101879052606401602060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f91906110c2565b6109015760405162461bcd60e51b815260206004820152602d60248201527f556e61626c6520746f207472616e7366657220746f6b656e7320746f2076657360448201526c1d1a5b99c818dbdb9d1c9858dd609a1b6064820152608401610318565b5050505050565b610910610f8a565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561095457600080fd5b505afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c91906110de565b6003546004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820184905292935091169063a9059cbb90604401602060405180830381600087803b1580156109e257600080fd5b505af11580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a91906110c2565b610a365760405162461bcd60e51b8152600401610318906110f6565b50565b610a41610f8a565b60048054911515600160a01b0260ff60a01b19909216919091179055565b610a67610f8a565b6105606000610fe4565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610ab557600080fd5b505afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed91906110de565b905090565b6001600160a01b0381166000908152600260208181526040808420815160e0810183528154808252600183015494820185905294820154928101839052600382015460608201819052600483015460808301819052600584015460a0840181905260069094015460c0840181905288978897889788978897889788979196909290610b7d8385611184565b9850985098509850985098509850985050919395975091939597565b610ba1610f8a565b6001600160a01b03811660009081526002602081905260409091209081015415610c045760405162461bcd60e51b815260206004820152601460248201527343616e206e6f742063616e63656c20747769636560601b6044820152606401610318565b42816001015411610c575760405162461bcd60e51b815260206004820152601b60248201527f56657374696e6720697320616c72656164792066696e697368656400000000006044820152606401610318565b6040805160e08101825282548152600183015460208201526002830154918101919091526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600090610caf90610e61565b4260028401556004830154909150600090610cca908361112d565b90506000818460030154610cde9190611184565b6003858101849055546004805460405163a9059cbb60e01b81526001600160a01b03918216928101929092526024820184905292935091169063a9059cbb90604401602060405180830381600087803b158015610d3a57600080fd5b505af1158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7291906110c2565b610d8e5760405162461bcd60e51b8152600401610318906110f6565b6001600160a01b0385166000818152600260208181526040928390209091015482518781529182015281513393927fbc2075d9ef107583b6d08c65185a920ae48465167bcc8d1a42829d206a894d1a928290030190a35050505050565b610df3610f8a565b6001600160a01b038116610e585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610318565b610a3681610fe4565b80516000904211610e74575060006102b5565b816020015142118015610e8957506040820151155b15610ea95781608001518260600151610ea29190611184565b90506102b5565b816040015142118015610ebf5750604082015115155b15610f005781516040830151600091610ed791611184565b905082608001518360c0015182610eee9190611165565b610ef89190611184565b9150506102b5565b8151600090610f0f9042611184565b905082608001518360c0015182610f269190611165565b6102b19190611184565b60026000541415610f835760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610318565b6002600055565b6001546001600160a01b031633146105605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610318565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146102b557600080fd5b60006020828403121561105e578081fd5b61106782611036565b9392505050565b60008060008060808587031215611083578283fd5b61108c85611036565b966020860135965060408601359560600135945092505050565b6000602082840312156110b7578081fd5b8135611067816111b1565b6000602082840312156110d3578081fd5b8151611067816111b1565b6000602082840312156110ef578081fd5b5051919050565b60208082526019908201527f556e61626c6520746f207472616e7366657220746f6b656e7300000000000000604082015260600190565b600082198211156111405761114061119b565b500190565b60008261116057634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561117f5761117f61119b565b500290565b6000828210156111965761119661119b565b500390565b634e487b7160e01b600052601160045260246000fd5b8015158114610a3657600080fdfea264697066735822122097f82399487f1dc446258d5a219eddc1712f404ffdf980f5bef078610fb0e67a64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/VestingContract.sol:VestingContract",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/VestingContract.sol:VestingContract",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 956,
        "contract": "contracts/VestingContract.sol:VestingContract",
        "label": "vestingSchedule",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Schedule)951_storage)"
      },
      {
        "astId": 959,
        "contract": "contracts/VestingContract.sol:VestingContract",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)842"
      },
      {
        "astId": 964,
        "contract": "contracts/VestingContract.sol:VestingContract",
        "label": "recoveryWallet",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 966,
        "contract": "contracts/VestingContract.sol:VestingContract",
        "label": "paused",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)842": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Schedule)951_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VestingContract.Schedule)",
        "numberOfBytes": "32",
        "value": "t_struct(Schedule)951_storage"
      },
      "t_struct(Schedule)951_storage": {
        "encoding": "inplace",
        "label": "struct VestingContract.Schedule",
        "members": [
          {
            "astId": 938,
            "contract": "contracts/VestingContract.sol:VestingContract",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 940,
            "contract": "contracts/VestingContract.sol:VestingContract",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 942,
            "contract": "contracts/VestingContract.sol:VestingContract",
            "label": "canceledTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 944,
            "contract": "contracts/VestingContract.sol:VestingContract",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 946,
            "contract": "contracts/VestingContract.sol:VestingContract",
            "label": "totalDrawn",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 948,
            "contract": "contracts/VestingContract.sol:VestingContract",
            "label": "lastDrawnAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 950,
            "contract": "contracts/VestingContract.sol:VestingContract",
            "label": "withdrawRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}